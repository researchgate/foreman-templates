<%#
kind: finish
name: Preseed default finish
oses:
- Debian
- Ubuntu
%>
<%
  # safemode renderer does not support unary negation
  pm_set = @host.puppetmaster.empty? ? false : true
  puppet_enabled = pm_set || host_param('force-puppet') && host_param('force-puppet') == 'true'
  salt_enabled = host_param('salt_master') ? true : false
  chef_enabled = @host.respond_to?(:chef_proxy) && @host.chef_proxy
  is_physical = (@host.facts['virtual'] == 'physical') ? true : false
  packages_host = host_param('packages_host') ? host_param('packages_host') : "packages.#{@host.domain}"
  aptly_host = (host_param('aptly_host') and not host_param('aptly_host').empty?) ? host_param('aptly_host') : "aptly.#{@host.domain}"

  preseed_extra_packages = (host_param('extra_packages') and not host_param('extra_packages').empty?) ? host_param('extra_packages').split(',') : []
  preseed_extra_packages << "lsb-release"
  preseed_extra_packages << "openssh-server"
  preseed_extra_packages << "build-essential"
  preseed_extra_packages << "vim"
  preseed_extra_packages << "sed"
  preseed_extra_packages << "xfsprogs"
  preseed_extra_packages << "smartmontools"
  preseed_extra_packages << "fio"
  preseed_extra_packages << "stress"
  preseed_extra_packages << "memtester"
  preseed_extra_packages << "bc"
  preseed_extra_packages << "apt-transport-https"
  preseed_extra_packages << "lshw"
  preseed_extra_packages << "megacli"
  preseed_extra_packages << "lvm2"
  preseed_extra_packages = preseed_extra_packages.join(' ')
%>

exec 1>/bootstrap_finish.log 2>&1
<% if (@host.operatingsystem.name =~ /^Ubuntu/ and @host.operatingsystem.major.to_i >= 18) -%>
# bionic installer fix for apt-keys
apt-get install -qy --no-install-recommends gnupg2
<%   if aptly_host -%>
wget -q http://<%= aptly_host -%>/pubkey.pub -O- | apt-key add -
<%   end -%>
<% end -%>
apt-get update
apt-get install -qy --no-install-recommends <%= preseed_extra_packages %>

<% subnet = @host.subnet -%>
<% if subnet.respond_to?(:dhcp_boot_mode?) -%>
<%   dhcp = subnet.dhcp_boot_mode? && !@static -%>
<% else -%>
<%   dhcp = !@static -%>
<% end -%>
<% unless dhcp -%>
# host and domain name need setting as these values may have come from dhcp if pxe booting
/bin/sed -i "s/^search.*$/search <%= @host.domain %>/g" /etc/resolv.conf
/bin/sed -i "s/.*dns-search.*/\tdns-search <%= @host.domain %>/g" /etc/network/interfaces
/bin/sed -i "s/^<%= @host.ip %>.*/<%= @host.ip %>\t<%= @host.shortname %>.<%= @host.domain %>\t<%= @host.shortname %>/g" /etc/hosts
<% end -%>

## bind home and opt to data disk partition
mkdir -p /mnt/disk1_data/home
echo '/mnt/disk1_data/home  /home none bind,nofail 0 0' >> /etc/fstab
mkdir /mnt/disk1_data/opt
echo '/mnt/disk1_data/opt  /opt none bind,nofail 0 0' >> /etc/fstab
/bin/mount -a

# make sure puppetlabs dir exists if we use this as parent for ssl
mkdir -p /etc/puppetlabs/puppet
<% if host_param_true?('enable-puppet4') %>
apt-get install -y puppet-agent
cat > /etc/puppetlabs/puppet/puppet.conf << EOF
<%= snippet 'puppet.conf' %>
stringify_facts = false
EOF
if [ -f "/etc/default/puppet" ]
then
/bin/sed -i 's/^START=no/START=yes/' /etc/default/puppet
fi
/opt/puppetlabs/puppet/bin/puppet agent --enable
/opt/puppetlabs/puppet/bin/puppet agent --config /etc/puppetlabs/puppet/puppet.conf --detailed-exitcodes --onetime --configtimeout 300 --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize --logdest /var/log/puppet/puppet.log --verbose --debug --trace || /bin/true
/opt/puppetlabs/puppet/bin/puppet resource service puppet enable=true
<% else -%>
<% if host_param_true?('enable-puppet5') %>
apt-get install -y puppet-agent
cat > /etc/puppetlabs/puppet/puppet.conf << EOF
<%= snippet 'puppet.conf' %>
stringify_facts = false
EOF
if [ -f "/etc/default/puppet" ]
then
/bin/sed -i 's/^START=no/START=yes/' /etc/default/puppet
fi
/opt/puppetlabs/puppet/bin/puppet agent --enable
/opt/puppetlabs/puppet/bin/puppet agent --config /etc/puppetlabs/puppet/puppet.conf --detailed-exitcodes --onetime --configtimeout 300 --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize --logdest /var/log/puppet/puppet.log --verbose --debug --trace || /bin/true
/opt/puppetlabs/puppet/bin/puppet resource service puppet enable=true
<% else -%>
<%  if puppet_enabled %>
apt-get install -y puppet
cat > /etc/puppet/puppet.conf << EOF
<%= snippet 'puppet.conf' %>
stringify_facts = false
EOF
if [ -f "/etc/default/puppet" ]
then
/bin/sed -i 's/^START=no/START=yes/' /etc/default/puppet
fi
/bin/touch /etc/puppet/namespaceauth.conf
/usr/bin/puppet agent --enable
/usr/bin/puppet agent --config /etc/puppet/puppet.conf --detailed-exitcodes --onetime --configtimeout 300 --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize --logdest /var/log/puppet/puppet.log --verbose --debug --trace || /bin/true
/usr/bin/puppet resource service puppet enable=true
<%  end -%>
<% end -%>
<% end -%>

<% if host_enc['parameters']['realm'] && @host.otp && @host.realm && @host.realm.realm_type == 'FreeIPA' -%>
<%= snippet 'freeipa_register' %>
<% end -%>

<% if salt_enabled %>
cat > /etc/salt/minion << EOF
<%= snippet 'saltstack_minion' %>
EOF
# Running salt-call to trigger key signing
salt-call --no-color --grains >/dev/null
<% end -%>

<% if chef_enabled %>
<%= respond_to?(:chef_bootstrap) ? chef_bootstrap(@host) : snippet_if_exists("chef-client omnibus bootstrap") %>
<% end%>

# RG STUFF
# add fqdn as hostname
/bin/echo "<%= @host.shortname %>.<%= @host.domain %>" > /etc/hostname
## resolv.conf
cat << _EOF > /etc/resolvconf/resolv.conf.d/head
domain <%= @host.domain %>
<% [subnet.dns_primary,subnet.dns_secondary].reject{|n| n.blank?}.each do |dns_server| -%>
nameserver <%= dns_server %>
<% end -%>
options rotate
options timeout:1
_EOF

<% if @host.operatingsystem.name =~ /^Ubuntu/ -%>
<% if @host.operatingsystem.major.to_i >= 17 -%>
# Make sure systemd-resolved is fully disabled and not messing up resolvconf
/bin/systemctl disable systemd-resolved.service
/bin/systemctl stop systemd-resolved.service
[ -f /etc/resolv.conf ] && rm /etc/resolv.conf
cat << _EOF > /etc/resolv.conf
domain <%= @host.domain %>
<% [subnet.dns_primary,subnet.dns_secondary].reject{|n| n.blank?}.each do |dns_server| -%>
nameserver <%= dns_server %>
<% end -%>
options rotate
options timeout:1
_EOF
<% end -%>
<% end -%>

## allow root login
sed -i "s/^[#]*PermitRootLogin .*$/PermitRootLogin yes/g" /etc/ssh/sshd_config

<% if @host.operatingsystem.name =~ /^Ubuntu/ -%>
# xenial workaround to override default options for grub to disable splash
sed 's/GRUB_CMDLINE_LINUX_DEFAULT=".*"/GRUB_CMDLINE_LINUX_DEFAULT="nosplash net.ifnames=0 biosdevname=0 usbcore.autosuspend=-1"/g' -i /etc/default/grub && update-grub
<% if @host.operatingsystem.major.to_i >= 15 -%>
# fix puppet.service start issue on boot
mkdir -p /etc/systemd/system/puppet.service.d
cat > /etc/systemd/system/puppet.service.d/waitfornetwork.conf << EOF
[Unit]
Description=Puppet agent
Wants=network-online.target
After=network-online.target
EOF
<% end -%>
<% end -%>

# Prepare RG bootstrap
/usr/bin/wget --no-proxy --quiet --output-document=/root/rg-bootstrap.sh "https://${packages_host}/scripts/bootstrap/rg-bootstrap.sh"

# Send finish to foreman
/usr/bin/wget --no-proxy --quiet --output-document=/dev/null --no-check-certificate <%= foreman_url('built') %>
